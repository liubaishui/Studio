<#@ PatternModel processor="PatternModelDirectiveProcessor" requires="fileName='..\..\NServiceBusStudio\PatternModel.patterndefinition'" #>
<#@ ProductStateStore processor="ProductStateStoreDirectiveProcessor" requires="fileName='..\..\Studio.slnbldr'" #>
<#@ Template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="NuPattern.Runtime.Interfaces.dll" #>
<#@ Assembly Name="NuPattern.Extensibility.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.TeamArchitect.PowerTools.dll" #>
<#@ Assembly Name="NuPattern.Authoring.PatternToolkit.Automation.dll" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Extensibility" #>
<#@ Import Namespace="NuPattern.Authoring" #>
<#@ Import Namespace="NuPattern.Authoring.PatternToolkit" #>
<#@ output extension=".Generated.cs" #>
<#
// This template generates the IToolkitElement interface inheritance and implementation
// for all elements and collections in the model.
#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using NuPattern.Runtime;
using Microsoft.VisualStudio.TeamArchitect.PowerTools;
using Microsoft.VisualStudio.TeamArchitect.PowerTools.Features;
using Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.Diagnostics;
using NServiceBusStudio.Automation.Infrastructure;
using NServiceBusStudio.Automation.Extensions;

namespace NServiceBusStudio
{
	#region Interfaces
<#
	var product = this.PatternModelSchema.Store.DefaultPartition.ElementDirectory.AllElements.OfType<IPatternInfo>().First();
    var elements = this.PatternModelSchema.Store.DefaultPartition.ElementDirectory.AllElements
        .OfType<IElementInfo>()
        .ToList();
    var collections = this.PatternModelSchema.Store.DefaultPartition.ElementDirectory.AllElements
        .OfType<ICollectionInfo>()
        .ToList();

    GenerateInterface(product);

    elements.ForEach(e => GenerateInterface(e));
	collections.ForEach(c => GenerateInterface(c));
#>

	#endregion Interfaces

	#region Implementations

<#
    GenerateImplementation(product, "AsProduct", isProduct: true);

    elements.ForEach(e => GenerateImplementation(e, "AsElement"));
    collections.ForEach(c => GenerateImplementation(c, "AsCollection"));

#>

	#endregion Implementations
}
<#+
private void GenerateInterface(IPatternElementInfo element)
{
#>

	partial interface I<#= element.CodeIdentifier #> : IToolkitElement
	{
		string CodeIdentifier { get; }

<#+
foreach (var property in element.Properties)
{
#>
		event EventHandler <#= property.CodeIdentifier #>Changed;
<#+
}	
	
#>
	}
<#+
}

private void GenerateImplementation(IPatternElementInfo element, string asRuntimeMethod, bool isProduct = false)
{
#>

	partial class <#= element.CodeIdentifier #> : ISupportInitialize
	{
		private static readonly ITraceSource tracer = Tracer.GetSourceFor<<#= element.CodeIdentifier #>>();

		static <#= element.CodeIdentifier #>()
		{
			TypeDescriptor.AddProvider(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(<#= element.CodeIdentifier #>)), typeof(<#= element.CodeIdentifier #>));
			<#= element.CodeIdentifier #>.StaticInitialization();
		}

		static partial void StaticInitialization();

		#region Initialization

		public event EventHandler Initialized = (sender, args) => { };

		public bool IsInitialized { get; private set; }
		
		[Import(AllowDefault = true)]
		public IFeatureCompositionService CompositionService { get; set; }

		[Import]
        public IFxrUriReferenceService UriService { get; set; }

        [Import]
        public RefactoringManager RefactoringManager { get; set; }

		public virtual void BeginInit()
		{
		}

		public virtual void EndInit()
		{
			if (this.CompositionService != null)
			{
				var element = this.<#= asRuntimeMethod #>();
				var automations = this.CompositionService
//					.GetExports<IAutomationExtension, IFeatureComponentMetadata>(typeof(I<#= element.CodeIdentifier #>).FullName)
					.GetExports<IAutomationExtension, IDictionary<string, object>>()
					.FromFeaturesCatalog()
					.Where(x => x.Metadata["ContractName"] == typeof(I<#= element.CodeIdentifier #>).FullName)
					.Select(x => x.Value);

				foreach (var automation in automations)
				{
					// This already calls BeginInit/EndInit and SatisfyImports as needed
					// on the base ProductElement class in the runtime.
					element.AddAutomationExtension(automation);
				}
			}

			this.OriginalInstanceName = this.InstanceName;

			Initialize();
			if (ElementInitialized != null)
			{
				ElementInitialized(this, EventArgs.Empty);
			}
			this.IsInitialized = true;
			this.Initialized(this, EventArgs.Empty);
		}

		/// <summary>
		/// Optional partial method that is invoked when EndInit is called 
		/// on the element.
		/// </summary>
		partial void Initialize();

		public static event EventHandler ElementInitialized;

		#endregion

		public string OriginalInstanceName { get; set; }

		public event EventHandler InstanceNameChanged = (sender, args) => { };
<#+
foreach (var property in element.Properties)
{
#>
		public event EventHandler <#= property.CodeIdentifier #>Changed = (sender, args) => { };
<#+
}	
#>

		public string CodeIdentifier
		{
			get { return System.Xml.Serialization.CodeIdentifier.MakeValid(this.target.InstanceName); }
		}

		partial void OnCreated()
		{
			this.<#= asRuntimeMethod #>().PropertyChanged += OnPropertyChanged;
			Create();
		}

		partial void Create();

		private void OnPropertyChanged(object sender, PropertyChangedEventArgs args)
		{
			Application.ResetIsDirtyFlag();

			var property = this.<#= asRuntimeMethod #>().Properties.FirstOrDefault(x => x.DefinitionName == args.PropertyName);
			if (property != null && property.Info.IsVisible)
			{
				tracer.TraceStatistics("Property {0} on {1} ({2}) was changed to: {3}", args.PropertyName, this.InstanceName, "<#= element.CodeIdentifier #>", property.Value.ToString());
			}

			switch (args.PropertyName)
			{
<#+
foreach (var property in element.Properties)
{
#>
				case "<#= property.CodeIdentifier #>":
					<#= property.CodeIdentifier #>Changed(sender, args);
					break;
<#+
}	
#>
				case "InstanceName":
					if (this.OriginalInstanceName != null) {
						if (this.InstanceName != this.OriginalInstanceName && 
							this.<#= asRuntimeMethod #>().RenameElement(this, this.UriService, this.RefactoringManager)) 
						{
							InstanceNameChanged(sender, args);
							this.OriginalInstanceName = this.InstanceName;
						}
						else
						{
							this.InstanceName = this.OriginalInstanceName;
						}
					}
					break;					
				default:
					break;
			}
		}
	}
<#+
}
#>