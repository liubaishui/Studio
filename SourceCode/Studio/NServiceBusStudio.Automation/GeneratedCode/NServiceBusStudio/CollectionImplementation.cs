
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services
	///	</summary>
	[Description("Description for Application.Design.Services")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "25802dff-4552-4b8a-9fec-4943a9f20c26", ProxyType = typeof(Services))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Services : IServices
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IServices> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Services() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Services"/> class.
		/// </summary>
		public Services(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IServices>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDesign Parent
		{ 
			get { return this.target.Parent.As<IDesign>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IService"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IService> Service 
		{ 
			get { return proxy.GetElements(() => this.Service, element => new Service(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IService"/>  and adds it to the <see cref="Service"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IService CreateService(string name, Action<IService> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IService>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services.Service.Contract
	///	</summary>
	[Description("Description for Application.Design.Services.Service.Contract")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "14dd0a39-32b5-4814-9ed5-4279aba392af", ProxyType = typeof(Contract))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Contract : IContract
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IContract> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Contract() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Contract"/> class.
		/// </summary>
		public Contract(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IContract>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IService Parent
		{ 
			get { return this.target.Parent.As<IService>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets the <see cref="IEvents"/> contained in this element.
		/// </summary>
		public virtual IEvents Events 
		{ 
			get { return proxy.GetElement(() => this.Events, element => new Events(element)); }
		}
		
		/// <summary>
		/// Gets the <see cref="ICommands"/> contained in this element.
		/// </summary>
		public virtual ICommands Commands 
		{ 
			get { return proxy.GetElement(() => this.Commands, element => new Commands(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IEvents"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IEvents CreateEvents(string name, Action<IEvents> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<IEvents>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="ICommands"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ICommands CreateCommands(string name, Action<ICommands> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<ICommands>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services.Service.Contract.Events
	///	</summary>
	[Description("Description for Application.Design.Services.Service.Contract.Events")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "6b6c2df4-f261-4d62-819f-70e170c196ca", ProxyType = typeof(Events))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Events : IEvents
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IEvents> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Events() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Events"/> class.
		/// </summary>
		public Events(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IEvents>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IContract Parent
		{ 
			get { return this.target.Parent.As<IContract>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}

		///	<summary>
		///	Description for Application.Design.Services.Service.Contract.Events.Namespace
		///	</summary>
		[Description("Description for Application.Design.Services.Service.Contract.Events.Namespace")]
		[DisplayName("Namespace")]
		[Category("General")]
		public virtual String Namespace 
		{
			get { return this.proxy.GetValue(() => this.Namespace); }
			set { this.proxy.SetValue(() => this.Namespace, value); }
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IEvent"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IEvent> Event 
		{ 
			get { return proxy.GetElements(() => this.Event, element => new Event(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IEvent"/>  and adds it to the <see cref="Event"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IEvent CreateEvent(string name, Action<IEvent> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IEvent>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services.Service.Contract.Commands
	///	</summary>
	[Description("Description for Application.Design.Services.Service.Contract.Commands")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "fa52a7b2-5908-451e-a185-4eb52d4e6343", ProxyType = typeof(Commands))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Commands : ICommands
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ICommands> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Commands() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Commands"/> class.
		/// </summary>
		public Commands(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ICommands>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IContract Parent
		{ 
			get { return this.target.Parent.As<IContract>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}

		///	<summary>
		///	Description for Application.Design.Services.Service.Contract.Commands.Namespace
		///	</summary>
		[Description("Description for Application.Design.Services.Service.Contract.Commands.Namespace")]
		[DisplayName("Namespace")]
		[Category("General")]
		public virtual String Namespace 
		{
			get { return this.proxy.GetValue(() => this.Namespace); }
			set { this.proxy.SetValue(() => this.Namespace, value); }
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ICommand"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ICommand> Command 
		{ 
			get { return proxy.GetElements(() => this.Command, element => new Command(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ICommand"/>  and adds it to the <see cref="Command"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ICommand CreateCommand(string name, Action<ICommand> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ICommand>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services.Service.Components
	///	</summary>
	[Description("Description for Application.Design.Services.Service.Components")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "54f49375-e376-4668-94e0-df31f6184f56", ProxyType = typeof(Components))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Components : IComponents
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IComponents> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Components() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Components"/> class.
		/// </summary>
		public Components(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IComponents>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IService Parent
		{ 
			get { return this.target.Parent.As<IService>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IComponent"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IComponent> Component 
		{ 
			get { return proxy.GetElements(() => this.Component, element => new Component(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IComponent"/>  and adds it to the <see cref="Component"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IComponent CreateComponent(string name, Action<IComponent> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IComponent>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services.Service.Components.Component.Publishes
	///	</summary>
	[Description("Description for Application.Design.Services.Service.Components.Component.Publishes")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "318cc384-e8ba-465f-8469-1235fce91ef0", ProxyType = typeof(Publishes))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Publishes : IPublishes
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IPublishes> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Publishes() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Publishes"/> class.
		/// </summary>
		public Publishes(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IPublishes>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IComponent Parent
		{ 
			get { return this.target.Parent.As<IComponent>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IEventLink"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IEventLink> EventLinks 
		{ 
			get { return proxy.GetElements(() => this.EventLinks, element => new EventLink(element)); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ICommandLink"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ICommandLink> CommandLinks 
		{ 
			get { return proxy.GetElements(() => this.CommandLinks, element => new CommandLink(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IEventLink"/>  and adds it to the <see cref="EventLinks"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IEventLink CreateEventLink(string name, Action<IEventLink> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IEventLink>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="ICommandLink"/>  and adds it to the <see cref="CommandLinks"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ICommandLink CreateCommandLink(string name, Action<ICommandLink> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ICommandLink>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services.Service.Components.Component.Subscribes
	///	</summary>
	[Description("Description for Application.Design.Services.Service.Components.Component.Subscribes")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "ffcf83ed-8aca-42ea-bebd-af35d17f23be", ProxyType = typeof(Subscribes))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Subscribes : ISubscribes
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ISubscribes> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Subscribes() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Subscribes"/> class.
		/// </summary>
		public Subscribes(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ISubscribes>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IComponent Parent
		{ 
			get { return this.target.Parent.As<IComponent>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ISubscribedEventLink"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ISubscribedEventLink> SubscribedEventLinks 
		{ 
			get { return proxy.GetElements(() => this.SubscribedEventLinks, element => new SubscribedEventLink(element)); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IProcessedCommandLink"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IProcessedCommandLink> ProcessedCommandLinks 
		{ 
			get { return proxy.GetElements(() => this.ProcessedCommandLinks, element => new ProcessedCommandLink(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ISubscribedEventLink"/>  and adds it to the <see cref="SubscribedEventLinks"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ISubscribedEventLink CreateSubscribedEventLink(string name, Action<ISubscribedEventLink> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ISubscribedEventLink>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="IProcessedCommandLink"/>  and adds it to the <see cref="ProcessedCommandLinks"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IProcessedCommandLink CreateProcessedCommandLink(string name, Action<IProcessedCommandLink> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IProcessedCommandLink>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services.Service.Components.Component.LibraryReferences
	///	</summary>
	[Description("Description for Application.Design.Services.Service.Components.Component.LibraryReferences")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "7a291463-b68c-45ac-8ad3-28eb5982aa3c", ProxyType = typeof(LibraryReferences))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class LibraryReferences : ILibraryReferences
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ILibraryReferences> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private LibraryReferences() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="LibraryReferences"/> class.
		/// </summary>
		public LibraryReferences(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ILibraryReferences>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IComponent Parent
		{ 
			get { return this.target.Parent.As<IComponent>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ILibraryReference"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ILibraryReference> LibraryReference 
		{ 
			get { return proxy.GetElements(() => this.LibraryReference, element => new LibraryReference(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ILibraryReference"/>  and adds it to the <see cref="LibraryReference"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ILibraryReference CreateLibraryReference(string name, Action<ILibraryReference> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ILibraryReference>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Services.Service.ServiceLibraries
	///	</summary>
	[Description("Description for Application.Design.Services.Service.ServiceLibraries")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "70a9d0ed-a581-4b84-8ac7-ad3d5b4a43d6", ProxyType = typeof(ServiceLibraries))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ServiceLibraries : IServiceLibraries
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IServiceLibraries> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private ServiceLibraries() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="ServiceLibraries"/> class.
		/// </summary>
		public ServiceLibraries(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IServiceLibraries>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IService Parent
		{ 
			get { return this.target.Parent.As<IService>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}

		///	<summary>
		///	Description for Application.Design.Services.Service.ServiceLibraries.Namespace
		///	</summary>
		[Description("Description for Application.Design.Services.Service.ServiceLibraries.Namespace")]
		[DisplayName("Namespace")]
		[Category("General")]
		public virtual String Namespace 
		{
			get { return this.proxy.GetValue(() => this.Namespace); }
			set { this.proxy.SetValue(() => this.Namespace, value); }
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IServiceLibrary"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IServiceLibrary> ServiceLibrary 
		{ 
			get { return proxy.GetElements(() => this.ServiceLibrary, element => new ServiceLibrary(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IServiceLibrary"/>  and adds it to the <see cref="ServiceLibrary"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IServiceLibrary CreateServiceLibrary(string name, Action<IServiceLibrary> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IServiceLibrary>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Endpoints
	///	</summary>
	[Description("Description for Application.Design.Endpoints")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "ad8ac730-01f5-47d8-bd53-5a1bc52ccb3b", ProxyType = typeof(Endpoints))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Endpoints : IEndpoints
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IEndpoints> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Endpoints() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Endpoints"/> class.
		/// </summary>
		public Endpoints(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IEndpoints>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDesign Parent
		{ 
			get { return this.target.Parent.As<IDesign>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="INServiceBusHost"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<INServiceBusHost> NServiceBusHosts 
		{ 
			get { return proxy.GetElements(() => this.NServiceBusHosts, element => new NServiceBusHost(element)); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="INServiceBusWeb"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<INServiceBusWeb> NServiceBusWebs 
		{ 
			get { return proxy.GetElements(() => this.NServiceBusWebs, element => new NServiceBusWeb(element)); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="INServiceBusMVC"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<INServiceBusMVC> NServiceBusMVCs 
		{ 
			get { return proxy.GetElements(() => this.NServiceBusMVCs, element => new NServiceBusMVC(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="INServiceBusHost"/>  and adds it to the <see cref="NServiceBusHosts"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual INServiceBusHost CreateNServiceBusHost(string name, Action<INServiceBusHost> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<INServiceBusHost>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="INServiceBusWeb"/>  and adds it to the <see cref="NServiceBusWebs"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual INServiceBusWeb CreateNServiceBusWeb(string name, Action<INServiceBusWeb> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<INServiceBusWeb>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="INServiceBusMVC"/>  and adds it to the <see cref="NServiceBusMVCs"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual INServiceBusMVC CreateNServiceBusMVC(string name, Action<INServiceBusMVC> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<INServiceBusMVC>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Endpoints.NServiceBusHost.Components
	///	</summary>
	[Description("Description for Application.Design.Endpoints.NServiceBusHost.Components")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "4640ec7c-c09c-42a6-90de-ff9cd99fd6b1", ProxyType = typeof(NServiceBusHostComponents))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class NServiceBusHostComponents : INServiceBusHostComponents
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<INServiceBusHostComponents> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private NServiceBusHostComponents() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="NServiceBusHostComponents"/> class.
		/// </summary>
		public NServiceBusHostComponents(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<INServiceBusHostComponents>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual INServiceBusHost Parent
		{ 
			get { return this.target.Parent.As<INServiceBusHost>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="INServiceBusHostComponentLink"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<INServiceBusHostComponentLink> NServiceBusHostComponentLinks 
		{ 
			get { return proxy.GetElements(() => this.NServiceBusHostComponentLinks, element => new NServiceBusHostComponentLink(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="INServiceBusHostComponentLink"/>  and adds it to the <see cref="NServiceBusHostComponentLinks"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual INServiceBusHostComponentLink CreateNServiceBusHostComponentLink(string name, Action<INServiceBusHostComponentLink> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<INServiceBusHostComponentLink>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Endpoints.NServiceBusWeb.Components
	///	</summary>
	[Description("Description for Application.Design.Endpoints.NServiceBusWeb.Components")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "7fd9877f-4de1-4d74-a0a3-d3a09cc06a73", ProxyType = typeof(NServiceBusWebComponents))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class NServiceBusWebComponents : INServiceBusWebComponents
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<INServiceBusWebComponents> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private NServiceBusWebComponents() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="NServiceBusWebComponents"/> class.
		/// </summary>
		public NServiceBusWebComponents(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<INServiceBusWebComponents>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual INServiceBusWeb Parent
		{ 
			get { return this.target.Parent.As<INServiceBusWeb>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="INServiceBusWebComponentLink"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<INServiceBusWebComponentLink> NServiceBusWebComponentLinks 
		{ 
			get { return proxy.GetElements(() => this.NServiceBusWebComponentLinks, element => new NServiceBusWebComponentLink(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="INServiceBusWebComponentLink"/>  and adds it to the <see cref="NServiceBusWebComponentLinks"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual INServiceBusWebComponentLink CreateNServiceBusWebComponentLink(string name, Action<INServiceBusWebComponentLink> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<INServiceBusWebComponentLink>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Endpoints.NServiceBusMVC.Components
	///	</summary>
	[Description("Description for Application.Design.Endpoints.NServiceBusMVC.Components")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "2cb77a1f-f887-467c-b0e3-df2de031b87c", ProxyType = typeof(NServiceBusMVCComponents))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class NServiceBusMVCComponents : INServiceBusMVCComponents
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<INServiceBusMVCComponents> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private NServiceBusMVCComponents() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="NServiceBusMVCComponents"/> class.
		/// </summary>
		public NServiceBusMVCComponents(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<INServiceBusMVCComponents>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual INServiceBusMVC Parent
		{ 
			get { return this.target.Parent.As<INServiceBusMVC>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="INServiceBusMVCComponentLink"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<INServiceBusMVCComponentLink> NServiceBusMVCComponentLinks 
		{ 
			get { return proxy.GetElements(() => this.NServiceBusMVCComponentLinks, element => new NServiceBusMVCComponentLink(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="INServiceBusMVCComponentLink"/>  and adds it to the <see cref="NServiceBusMVCComponentLinks"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual INServiceBusMVCComponentLink CreateNServiceBusMVCComponentLink(string name, Action<INServiceBusMVCComponentLink> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<INServiceBusMVCComponentLink>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Infrastructure
	///	</summary>
	[Description("Description for Application.Design.Infrastructure")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "f847dee0-d0b7-4270-932f-8b18ceb74f21", ProxyType = typeof(Infrastructure))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Infrastructure : IInfrastructure
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IInfrastructure> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Infrastructure() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Infrastructure"/> class.
		/// </summary>
		public Infrastructure(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IInfrastructure>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDesign Parent
		{ 
			get { return this.target.Parent.As<IDesign>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets the <see cref="ISecurity"/> contained in this element.
		/// </summary>
		public virtual ISecurity Security 
		{ 
			get { return proxy.GetElement(() => this.Security, element => new Security(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ISecurity"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ISecurity CreateSecurity(string name, Action<ISecurity> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<ISecurity>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Infrastructure.Security
	///	</summary>
	[Description("Description for Application.Design.Infrastructure.Security")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "56d7865c-0be2-4f31-8b0d-0b0e12156582", ProxyType = typeof(Security))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Security : ISecurity
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ISecurity> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Security() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Security"/> class.
		/// </summary>
		public Security(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ISecurity>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IInfrastructure Parent
		{ 
			get { return this.target.Parent.As<IInfrastructure>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets the <see cref="IAuthentication"/> contained in this element.
		/// </summary>
		public virtual IAuthentication Authentication 
		{ 
			get { return proxy.GetElement(() => this.Authentication, element => new Authentication(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IAuthentication"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IAuthentication CreateAuthentication(string name, Action<IAuthentication> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IAuthentication>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.DummyCollection
	///	</summary>
	[Description("Description for Application.Design.DummyCollection")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "2f26d53d-1e7f-41ef-860b-f8c03f01624a", ProxyType = typeof(DummyCollection))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class DummyCollection : IDummyCollection
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IDummyCollection> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private DummyCollection() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="DummyCollection"/> class.
		/// </summary>
		public DummyCollection(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IDummyCollection>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDesign Parent
		{ 
			get { return this.target.Parent.As<IDesign>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.UseCases
	///	</summary>
	[Description("Description for Application.Design.UseCases")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "b88e98c7-39d7-4b6f-bfc9-7b7ca3e831b2", ProxyType = typeof(UseCases))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class UseCases : IUseCases
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IUseCases> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private UseCases() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="UseCases"/> class.
		/// </summary>
		public UseCases(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IUseCases>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDesign Parent
		{ 
			get { return this.target.Parent.As<IDesign>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IUseCase"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IUseCase> UseCase 
		{ 
			get { return proxy.GetElements(() => this.UseCase, element => new UseCase(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IUseCase"/>  and adds it to the <see cref="UseCase"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IUseCase CreateUseCase(string name, Action<IUseCase> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IUseCase>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NServiceBusStudio
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Description for Application.Design.Libraries
	///	</summary>
	[Description("Description for Application.Design.Libraries")]
	[ToolkitInterfaceProxy(ExtensionId ="a5e9f15b-ad7f-4201-851e-186dd8db3bc9", DefinitionId = "287ddef4-f681-4c17-8aa1-6e3768412fd9", ProxyType = typeof(Libraries))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Libraries : ILibraries
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ILibraries> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Libraries() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Libraries"/> class.
		/// </summary>
		public Libraries(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ILibraries>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDesign Parent
		{ 
			get { return this.target.Parent.As<IDesign>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}

		///	<summary>
		///	Description for Application.Design.Libraries.Namespace
		///	</summary>
		[Description("Description for Application.Design.Libraries.Namespace")]
		[DisplayName("Namespace")]
		[Category("General")]
		public virtual String Namespace 
		{
			get { return this.proxy.GetValue(() => this.Namespace); }
			set { this.proxy.SetValue(() => this.Namespace, value); }
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ILibrary"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ILibrary> Library 
		{ 
			get { return proxy.GetElements(() => this.Library, element => new Library(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ILibrary"/>  and adds it to the <see cref="Library"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ILibrary CreateLibrary(string name, Action<ILibrary> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ILibrary>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

